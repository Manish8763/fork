import java.util.*;
class node{
    int data;
    node left;
    node right;
}
public class Main
{
    static node root=null;
    static void insertbst(int x){
        node a=new node();
        a.data=x;
        if(root==null){
            root=a;
        }else{
            node p=root;
            node p1=root;
            while(p!=null){
                p1=p;
                if(p.data>x){
                    p=p.left;
                }else{
                    p=p.right;
                }
            }
            if(p1.data>x){
                p1.left=a;
            }else{
                p1.right=a;
            }
        }
    }
    static int countnode(node p){
        if(p==null)
          return 0;
        int l=countnode(p.left);
        int r=countnode(p.right);
        return 1+l+r;
    }
    static int countleaf(node p){
        if(p==null)
           return 0;
        if(p.left==null && p.right==null)
           return 1;
        return countleaf(p.left)+countleaf(p.right);
    }
    static int height(node p){
        if(p==null)
           return 0;
        int l=height(p.left);
        int r=height(p.right);
        if(l>r)
          return 1+l;
        else
          return 1+r;
    }
    static void preorder(node t){
        if(t==null)
           return;
        System.out.print(t.data+" ");
        preorder(t.left);
        preorder(t.right);
    }
     static void inorder(node t){
        if(t==null)
           return;
        inorder(t.left);
        System.out.print(t.data+" ");
        inorder(t.right);
    }
    static void postorder(node t){
        if(t==null)
           return;
        postorder(t.left);
        postorder(t.right);
        System.out.print(t.data+" ");
    }
    static void levelorder(){
        Queue<node> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            node t=q.remove();
            System.out.print(t.data+" ");
            if(t.left!=null)
                q.add(t.left);
            if(t.right!=null)
                q.add(t.right);
        }
    }
    static void insert(){
        Scanner s=new Scanner(System.in);
        Queue<node> q=new LinkedList<>();
        System.out.println("Enter root value");
        int x=s.nextInt();
        node a=new node();
        a.data=x;
        root=a;
        q.add(a);
        while(!q.isEmpty()){
            node t=q.remove();
            System.out.println("Enter left of "+t.data);
            int x1=s.nextInt();
            if(x1>=0){
                node a1=new node();
                a1.data=x1;
                t.left=a1;
                q.add(a1);
            }
            System.out.println("Enter right of "+t.data);
            int x2=s.nextInt();
            if(x2>=0){
                node a2=new node();
                a2.data=x2;
                t.right=a2;
                q.add(a2);
            }
        }
    }
public static void main(String[] args) {
    Scanner s=new Scanner(System.in);
    while(true){
        int x=s.nextInt();
        if(x>0)
        insertbst(x);
        else
        break;
    }
System.out.println("Level order traversal is");
levelorder();
   System.out.println("\nPre-order traversal is");
   preorder(root);
   System.out.println("\nIn-order traversal is");
   inorder(root);
   System.out.println("\nPost-order traversal is");
   postorder(root);
   System.out.println("\nCount of a node"+countnode(root));
   System.out.println("\nCount of a leaf node"+countleaf(root));
   System.out.println("\nHeight of a binary tree"+height(root));
}
}
